import Head from 'next/head'
import styles from '../styles/Home.module.css'
import canvas from '../src/data.json'
import { Fragment, useEffect, useState } from 'react'
import Swal from 'sweetalert2'
import Header from '../components/header'
import { useContract, useContractRead, useSigner } from 'wagmi'
import abi from '../src/abi/abi.json';



export default function Home() {

  const [results, setResults] = useState([]);
  const { data: signer, isError, isLoading } = useSigner()

  const contract = useContract({
    addressOrName: '0x292c25415dac88bfd9a0017270357e9d42b7deb7',
    contractInterface: abi,
    signerOrProvider: signer
  })

  useEffect(() => {
    console.log(contract);

    if(!contract.provider) return;
    setTimeout(getData, 3000);
  }, [contract.provider])

  async function getData() {
    if(!contract) return;

    console.log('getData');

    let items = [];
    for (let index = 0; index < 1000; index++) {
      items.push({ id: index })
    }

    let requests = items.slice(0);

    let res = [];

    let fn = async (chunks, res) => {
      let curr;

      curr = await Promise.all(chunks.map(prop =>
        new Promise(async resolve => {
          const data = await contract.getColor(prop.id.toString());
          resolve({id: prop.id, color: data});
        })));
      
      res.push(curr);

      return curr !== undefined && requests.length
        ? fn(requests.splice(0, 50), res)
        : res
    }

    fn(requests.splice(0, 50), res)
      .then(data => {
        let items = [{}]
        data.forEach(element => {
          if(!Array.isArray(element)) return;
          element.forEach(item => {
            items.push(item)
          });
        });

        setResults(items);
      })
      .catch(err => console.error(err))
  }

  return (
    <div className={styles.container}>
      <Header />

      <Head>
        <title>Fantom Canvas</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className='canvas-container'>
          <div className='canvas'>

          {results && results.map((x, index) => {
            return (
              <div className='item' key={index} style={{ backgroundColor:  x.color ? 'black' : 'blue' }} onClick={() => click(
                {
                  index: x.id,
                  color: x.color
                }
              )}></div>
            )
          })} 

          </div>
        </div>
      </main>
    </div>
  )

  async function click(element) {

    try{
      const data = await contract.ownerOf(element.index); 
      console.log(element);
      Swal.fire('id: ' + element.index + '(x:' + element.x + ' y:' + element.y + ') Owned by ' + data)
    
      console.log('Success', data)
    } catch(err) {
      console.log('without owner', element)
    }
  }
}



function buildCanvas() {
  let lastX = 0;
  let lastY = 0;

  let elements = canvas.items.map(element => {
    /* 
      Color {element.name}
      <br/>
      Name {element.color}
      <br/>
      X: {element.x}
      <br/>
      Y: {element.y}
   */
    let item = (
      <Fragment>
        {element.x < lastX ? (<div className='break'></div>) : ''}
        <div className='item' style={{ backgroundColor: element.color }} onClick={() => click(element)}>

        </div>
      </Fragment>
    )
    lastX = element.x;
    lastY = element.y;

    return item;
  })

  return elements
}